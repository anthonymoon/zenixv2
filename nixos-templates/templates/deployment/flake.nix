{
  description = "NixOS configuration with ZFS root and impermanence";

  inputs = {
    # Nixpkgs - main package repository
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # Hardware configuration for better device support
    nixos-hardware.url = "github:nixos/nixos-hardware";

    # Disko - declarative disk partitioning
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Impermanence - stateless root filesystem
    impermanence = {
      url = "github:nix-community/impermanence";
    };

    # Home Manager - user environment management (optional but recommended)
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Secure secrets management (optional)
    sops-nix = {
      url = "github:Mic92/sops-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, disko, impermanence, home-manager, nixos-hardware, sops-nix, ... }@inputs:
    let
      system = "x86_64-linux"; # Adjust if using different architecture

      # Helper function to create a system
      mkSystem = hostname: nixpkgs.lib.nixosSystem {
        inherit system;

        modules = [
          # Hardware configuration (generated by nixos-generate-config)
          ./hosts/${hostname}/hardware-configuration.nix

          # Our ZFS configuration
          ./nixos-zfs-root-config.nix

          # Disko module
          disko.nixosModules.disko

          # Impermanence module
          impermanence.nixosModules.impermanence

          # Home Manager module (optional)
          home-manager.nixosModules.home-manager

          # Sops for secrets (optional)
          sops-nix.nixosModules.sops

          # Host-specific configuration
          ./hosts/${hostname}/configuration.nix

          # Common configuration
          ({ config, pkgs, lib, ... }: {
            # Nix configuration
            nix = {
              settings = {
                # Enable flakes
                experimental-features = [ "nix-command" "flakes" ];

                # Optimize storage
                auto-optimise-store = true;

                # Binary caches
                substituters = [
                  "https://cache.nixos.org"
                  "https://nix-community.cachix.org"
                ];
                trusted-public-keys = [
                  "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
                  "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
                ];

                # Trusted users
                trusted-users = [ "root" "@wheel" ];
              };

              # Garbage collection
              gc = {
                automatic = true;
                dates = "weekly";
                options = "--delete-older-than 14d";
              };

              # Flake registry pinning
              registry = lib.mapAttrs (_: value: { flake = value; }) inputs;
              nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;
            };

            # System state version (don't change after installation)
            system.stateVersion = "24.11"; # Adjust to your NixOS version

            # Basic system configuration
            time.timeZone = "UTC"; # Change to your timezone
            i18n.defaultLocale = "en_US.UTF-8";

            # Console configuration
            console = {
              font = "Lat2-Terminus16";
              keyMap = "us";
            };

            # Enable firmware updates
            services.fwupd.enable = true;

            # Basic security settings
            security = {
              sudo = {
                enable = true;
                wheelNeedsPassword = true;
                execWheelOnly = true;
              };

              # Kernel security
              protectKernelImage = true;
              forcePageTableIsolation = true;
              virtualisation.flushL1DataCache = "always";
            };

            # Home Manager configuration (optional)
            home-manager = {
              useGlobalPkgs = true;
              useUserPackages = true;
              extraSpecialArgs = { inherit inputs; };
            };
          })
        ];

        specialArgs = { inherit inputs; };
      };
    in
    {
      # Define your systems here
      nixosConfigurations = {
        # Example system - rename to your hostname
        nixos-zfs = mkSystem "nixos-zfs";

        # Add more systems as needed
        # laptop = mkSystem "laptop";
        # desktop = mkSystem "desktop";
      };

      # Convenience outputs for installation
      packages.${system} = {
        # Installation ISO with ZFS support
        install-iso = nixpkgs.legacyPackages.${system}.nixos-generators.nixosGenerate {
          system = system;
          modules = [
            ({ pkgs, ... }: {
              # Enable ZFS in the installer
              boot.supportedFilesystems = [ "zfs" ];
              boot.zfs.forceImportRoot = false;

              # Include useful tools in the installer
              environment.systemPackages = with pkgs; [
                git
                vim
                wget
                disko
                gptfdisk
              ];

              # Enable SSH in installer for remote installation
              services.openssh = {
                enable = true;
                settings.PermitRootLogin = "yes";
              };

              # Networking
              networking.networkmanager.enable = true;
              networking.wireless.enable = false;

              # Set root password for installer (change this!)
              users.users.root.initialPassword = "nixos";
            })
          ];
          format = "install-iso";
        };
      };

      # Apps for easy access to tools
      apps.${system} = {
        # Disko formatter
        format = {
          type = "app";
          program = "${disko.packages.${system}.default}/bin/disko";
        };

        # Installation script
        install = {
          type = "app";
          program = toString (nixpkgs.legacyPackages.${system}.writeShellScript "install" ''
            #!/usr/bin/env bash
            set -euo pipefail
            
            echo "NixOS ZFS Installation Script"
            echo "============================"
            echo ""
            echo "WARNING: This will DESTROY all data on the target disk!"
            echo ""
            read -p "Target disk (e.g., /dev/nvme0n1): " DISK
            read -p "Hostname for the new system: " HOSTNAME
            read -p "Username for the primary user: " USERNAME
            
            echo ""
            echo "You entered:"
            echo "  Disk: $DISK"
            echo "  Hostname: $HOSTNAME"
            echo "  Username: $USERNAME"
            echo ""
            read -p "Is this correct? (yes/no): " CONFIRM
            
            if [[ "$CONFIRM" != "yes" ]]; then
              echo "Aborting installation."
              exit 1
            fi
            
            # Update the disk device in the configuration
            sed -i "s|/dev/nvme0n1|$DISK|g" ./nixos-zfs-root-config.nix
            
            # Run disko to partition and format
            echo "Running disko to partition and format..."
            sudo ${disko.packages.${system}.default}/bin/disko --mode disko ./nixos-zfs-root-config.nix
            
            # Generate hardware configuration
            echo "Generating hardware configuration..."
            sudo nixos-generate-config --root /mnt --show-hardware-config > ./hosts/$HOSTNAME/hardware-configuration.nix
            
            # Create host configuration
            mkdir -p ./hosts/$HOSTNAME
            cat > ./hosts/$HOSTNAME/configuration.nix << EOF
            { config, pkgs, lib, ... }:
            
            {
              networking.hostName = "$HOSTNAME";
              
              # Define your user
              users.users.$USERNAME = {
                isNormalUser = true;
                extraGroups = [ "wheel" "networkmanager" ];
                initialPassword = "changeme"; # Change on first login!
              };
              
              # Add your custom configuration here
            }
            EOF
            
            # Install NixOS
            echo "Installing NixOS..."
            sudo nixos-install --flake .#$HOSTNAME --no-root-password
            
            echo ""
            echo "Installation complete!"
            echo "Remember to:"
            echo "1. Set a secure password for user $USERNAME after first boot"
            echo "2. Review and customize ./hosts/$HOSTNAME/configuration.nix"
            echo "3. Commit your configuration to git"
          '');
        };
      };
    };
}
