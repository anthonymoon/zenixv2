name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily for security monitoring
    - cron: '0 2 * * *'

env:
  NIX_CONFIG: experimental-features = nix-command flakes

jobs:
  # 🔒 Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔒 Install security tools
        run: |
          nix profile install nixpkgs#detect-secrets
          nix profile install nixpkgs#git-secrets
          nix profile install nixpkgs#truffleHog

      - name: 🔍 Secret detection with detect-secrets
        run: |
          echo "🔍 Running detect-secrets scan..."
          detect-secrets scan --all-files \
            --exclude-files '\.lock$|\.git/|result.*' \
            --baseline .secrets.baseline || {
            echo "❌ New secrets detected!"
            echo "Run 'detect-secrets scan --update .secrets.baseline' to update baseline"
            exit 1
          }

      - name: 🔎 Scan for Git secrets
        run: |
          echo "🔎 Scanning for Git secrets..."
          git-secrets --register-aws
          git-secrets --install || true
          git-secrets --scan-history || {
            echo "❌ Git secrets found in history!"
            exit 1
          }

      - name: 🕵️ Deep secret scan with TruffleHog
        run: |
          echo "🕵️ Running TruffleHog deep scan..."
          trufflehog git file://. \
            --exclude-paths .trufflehog-exclude \
            --fail \
            --no-update || {
            echo "❌ Secrets detected by TruffleHog!"
            exit 1
          }

      - name: 🛡️ NixOS-specific security checks
        run: |
          echo "🛡️ Running NixOS-specific security checks..."

          # Build security audit tool
          nix build ".#packages.x86_64-linux.security-audit"

          # Run comprehensive security audit
          ./result/bin/nixos-unified-security-audit || {
            echo "❌ NixOS security audit failed!"
            exit 1
          }

      - name: 🔐 Check SSH configurations
        run: |
          echo "🔐 Validating SSH configurations..."
          failed=0

          # Check for secure SSH ciphers
          if grep -r "Ciphers" . --include="*.nix" | grep -v -E "(aes256-gcm|aes128-gcm|aes256-ctr)"; then
            echo "⚠️ Potentially weak SSH ciphers found"
          fi

          # Check for secure key exchange
          if grep -r "KexAlgorithms" . --include="*.nix" | grep -v "curve25519"; then
            echo "⚠️ Consider using curve25519 for key exchange"
          fi

          # Check for host key verification settings
          if grep -r "StrictHostKeyChecking.*no" . --include="*.nix"; then
            echo "❌ CRITICAL: Host key verification disabled!"
            failed=1
          fi

          if [ $failed -eq 1 ]; then
            exit 1
          fi

      - name: 🔍 Vulnerability assessment
        run: |
          echo "🔍 Running vulnerability assessment..."

          # Check for known vulnerable patterns
          vulnerable_patterns=(
            "eval.*user.*input"
            "system.*user.*input"
            "exec.*user.*input"
            "shell.*user.*input"
          )

          for pattern in "${vulnerable_patterns[@]}"; do
            if grep -r "$pattern" . --include="*.nix" --include="*.sh"; then
              echo "⚠️ Potentially vulnerable pattern found: $pattern"
            fi
          done

      - name: 📊 Generate security report
        if: always()
        run: |
          echo "📊 Generating security report..."
          cat > security-report.md << 'EOF'
          # Security Scan Report

          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}

          ## Summary

          - ✅ Secret detection completed
          - ✅ SSH configuration validated
          - ✅ NixOS security audit completed
          - ✅ Vulnerability assessment completed

          ## Recommendations

          1. Regular security updates
          2. Monitor for new vulnerabilities
          3. Review SSH configurations periodically
          4. Keep secrets detection up to date
          EOF

      - name: 📋 Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # 🔒 Dependency Scanning
  dependency-scan:
    name: Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for outdated inputs
        run: |
          echo "🔍 Checking for outdated flake inputs..."

          # Get current input versions
          nix flake metadata --json > current-metadata.json

          # Check for updates
          nix flake update --dry-run 2>&1 | tee update-check.log || true

          # Parse results
          if grep -q "would update" update-check.log; then
            echo "📦 Available updates found:"
            grep "would update" update-check.log
            echo ""
            echo "💡 Run 'nix flake update' to update dependencies"
          else
            echo "✅ All dependencies are up to date"
          fi

      - name: 🔒 Security advisory check
        run: |
          echo "🔒 Checking for security advisories..."

          # Extract input repositories from flake.lock
          if [ -f flake.lock ]; then
            echo "📋 Flake inputs:"
            jq -r '.nodes | to_entries[] | select(.value.original) | "\(.key): \(.value.original.owner // "local")/\(.value.original.repo // .key)"' flake.lock | head -10
          fi

          echo "💡 Manually check GitHub Security Advisories for input repositories"

      - name: 🔍 License compliance check
        run: |
          echo "🔍 Checking license compliance..."

          # This is a basic check - in practice, you'd use specialized tools
          echo "📋 Checking for license information in common locations..."

          find . -name "LICENSE*" -o -name "COPYING*" -o -name "COPYRIGHT*" | head -5

          if [ -f LICENSE ]; then
            echo "✅ License file found"
            head -3 LICENSE
          else
            echo "⚠️ No LICENSE file found in root directory"
          fi

  # 🔐 Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Workflow security check
        run: |
          echo "🔍 Checking GitHub Actions workflow security..."

          # Check for potentially unsafe patterns in workflows
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while IFS= read -r workflow; do
            echo "Checking: $workflow"

            # Check for potential script injection
            if grep -n '\${{.*github\.event\..*}}' "$workflow"; then
              echo "⚠️ Potential script injection in $workflow"
            fi

            # Check for secrets usage
            if grep -n 'secrets\.' "$workflow"; then
              echo "🔑 Secrets usage in $workflow (review for necessity)"
            fi

            # Check for third-party actions
            if grep -n 'uses:.*@' "$workflow" | grep -v '@v[0-9]'; then
              echo "📦 Third-party actions in $workflow (ensure they're pinned)"
            fi
          done

      - name: 🔒 Repository security settings check
        run: |
          echo "🔒 Repository security recommendations:"
          echo "1. Enable branch protection rules"
          echo "2. Require status checks before merging"
          echo "3. Require up-to-date branches"
          echo "4. Enable 'Restrict pushes that create files' for sensitive paths"
          echo "5. Enable security alerts for vulnerable dependencies"
          echo "6. Enable automated security updates"
          echo "7. Review repository collaborators regularly"

  # 📊 Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [ security-scan, dependency-scan, infrastructure-security ]
    if: always()

    steps:
      - name: 📊 Compile security summary
        run: |
          echo "📊 Security Scan Summary"
          echo "======================="
          echo ""
          echo "🔍 Security Scan: ${{ needs.security-scan.result }}"
          echo "📦 Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "🔐 Infrastructure Security: ${{ needs.infrastructure-security.result }}"
          echo ""

          if [[ "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.dependency-scan.result }}" == "success" && \
                "${{ needs.infrastructure-security.result }}" == "success" ]]; then
            echo "✅ All security checks passed!"
            echo "🛡️ Repository security posture: GOOD"
          else
            echo "❌ Some security checks failed"
            echo "🔒 Repository security posture: NEEDS ATTENTION"

            # Set exit code based on critical failures
            if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
              echo "🚨 Critical security issues detected!"
              exit 1
            fi
          fi
