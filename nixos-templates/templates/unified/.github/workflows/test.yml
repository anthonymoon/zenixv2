name: Test NixOS Configurations

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Quick syntax and security checks
  quick-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            
      - name: Run syntax checks
        run: |
          echo "üîç Checking Nix syntax..."
          nix flake check --no-build
          
      - name: Run security audit
        run: |
          echo "üõ°Ô∏è Running security audit..."
          nix build .#checks.x86_64-linux.security-audit --print-build-logs
          
      - name: Run performance check
        run: |
          echo "‚ö° Running performance analysis..."
          nix build .#checks.x86_64-linux.performance-check --print-build-logs

  # Essential VM tests (run on every PR)
  essential-vm-tests:
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      matrix:
        test:
          - vm-test-basic-boot
          - vm-test-security-basic
          - vm-test-security-firewall
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            system-features = nixos-test benchmark big-parallel kvm
            
      - name: Setup KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: Run test ${{ matrix.test }}
        run: |
          echo "üß™ Running ${{ matrix.test }}..."
          nix build .#checks.x86_64-linux.${{ matrix.test }} --print-build-logs -L

  # Service tests (run on main branch and releases)
  service-vm-tests:
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        test:
          - vm-test-service-nginx
          - vm-test-service-postgresql
          - vm-test-service-docker
          - vm-test-service-redis
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            system-features = nixos-test benchmark big-parallel kvm
            
      - name: Setup KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: Run test ${{ matrix.test }}
        run: |
          echo "üß™ Running ${{ matrix.test }}..."
          nix build .#checks.x86_64-linux.${{ matrix.test }} --print-build-logs -L
        timeout-minutes: 30

  # Multi-machine tests (run weekly or on manual trigger)
  multi-machine-tests:
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    strategy:
      matrix:
        test:
          - vm-test-multi-client-server
          - vm-test-multi-ha-cluster
          - vm-test-multi-microservices
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            system-features = nixos-test benchmark big-parallel kvm
            
      - name: Setup KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: Increase runner disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
      - name: Run test ${{ matrix.test }}
        run: |
          echo "üß™ Running ${{ matrix.test }}..."
          nix build .#checks.x86_64-linux.${{ matrix.test }} --print-build-logs -L
        timeout-minutes: 45

  # Profile validation tests
  profile-tests:
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            
      - name: Test profile builds
        run: |
          echo "üß™ Testing profile configurations..."
          nix build .#checks.x86_64-linux.build-all-configs --print-build-logs

  # Summary job
  test-summary:
    runs-on: ubuntu-latest
    needs: [quick-checks, essential-vm-tests]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Summary"
          echo ""
          echo "Quick Checks: ${{ needs.quick-checks.result }}"
          echo "Essential VM Tests: ${{ needs.essential-vm-tests.result }}"
          
          if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.essential-vm-tests.result }}" == "success" ]]; then
            echo ""
            echo "‚úÖ All required tests passed!"
            exit 0
          else
            echo ""
            echo "‚ùå Some tests failed!"
            exit 1
          fi