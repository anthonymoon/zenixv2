name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 0 * * 0'

env:
  # Performance optimizations
  NIXPKGS_ALLOW_UNFREE: 1
  NIX_CONFIG: |
    experimental-features = nix-command flakes
    access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    max-jobs = auto
    cores = 0

jobs:
  # 🔍 Code Quality & Validation
  validation:
    name: Code Quality & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 📦 Install development tools
        run: |
          nix profile install nixpkgs#alejandra
          nix profile install nixpkgs#statix
          nix profile install nixpkgs#deadnix
          nix profile install nixpkgs#markdownlint-cli
          nix profile install nixpkgs#shellcheck

      - name: 🎨 Check code formatting
        run: |
          echo "🎨 Checking Nix formatting..."
          alejandra --check .

          echo "📝 Checking Markdown formatting..."
          markdownlint . || true  # Allow to continue for now

      - name: 🔍 Lint code
        run: |
          echo "🔍 Running Nix linter..."
          statix check .

          echo "💀 Checking for dead code..."
          deadnix .

      - name: 📝 Validate Nix syntax
        run: |
          echo "📝 Checking Nix syntax..."
          find . -name "*.nix" -type f -not -path "./result*" | while IFS= read -r file; do
            echo "  Checking: $file"
            nix-instantiate --parse "$file" > /dev/null
          done

      - name: 🔒 Security scan
        run: |
          echo "🔒 Running security checks..."
          failed=0

          # Check for disabled firewalls
          if grep -r "firewall\.enable.*false" . --include="*.nix" 2>/dev/null; then
            echo "❌ CRITICAL: Disabled firewall found!"
            grep -r "firewall\.enable.*false" . --include="*.nix"
            failed=1
          fi

          # Check for root SSH login
          if grep -r "PermitRootLogin.*yes" . --include="*.nix" 2>/dev/null; then
            echo "❌ CRITICAL: Root SSH login enabled!"
            grep -r "PermitRootLogin.*yes" . --include="*.nix"
            failed=1
          fi

          # Check for hardcoded passwords (exclude templates/examples)
          if grep -r 'password.*=.*"[^"]*"' . --include="*.nix" | grep -v -E "(template|example|README)" 2>/dev/null; then
            echo "❌ CRITICAL: Hardcoded passwords found!"
            grep -r 'password.*=.*"[^"]*"' . --include="*.nix" | grep -v -E "(template|example|README)"
            failed=1
          fi

          if [ $failed -eq 1 ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ Security scan passed"

      - name: 📦 Validate flake
        run: |
          echo "📦 Validating flake structure..."
          nix flake check --no-build

      - name: 🧪 Check shell scripts
        run: |
          echo "🧪 Validating shell scripts..."
          find . -name "*.sh" -type f -exec shellcheck {} \; || true

  # 🏗️ Build Testing
  build-matrix:
    name: Build Configurations
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: validation

    strategy:
      fail-fast: false
      matrix:
        config: [ workstation, server, development, base, gaming ]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 🏗️ Build ${{ matrix.config }} configuration
        run: |
          echo "🏗️ Building ${{ matrix.config }} configuration..."
          nix build ".#nixosConfigurations.${{ matrix.config }}.config.system.build.toplevel" \
            --print-build-logs \
            --show-trace

      - name: 📊 Analyze build result
        run: |
          echo "📊 Build analysis for ${{ matrix.config }}:"
          nix path-info --closure-size --human-readable \
            ".#nixosConfigurations.${{ matrix.config }}.config.system.build.toplevel"

  # 📦 Package Testing
  package-testing:
    name: Test Packages
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validation

    strategy:
      fail-fast: false
      matrix:
        package: [ installer, security-audit, performance-benchmark, migration-helper ]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 📦 Build ${{ matrix.package }} package
        run: |
          echo "📦 Building ${{ matrix.package }} package..."
          nix build ".#packages.x86_64-linux.${{ matrix.package }}" \
            --print-build-logs

      - name: 🧪 Test package functionality
        run: |
          echo "🧪 Testing ${{ matrix.package }} functionality..."
          case "${{ matrix.package }}" in
            "installer")
              nix run ".#packages.x86_64-linux.installer" -- --help
              ;;
            "security-audit")
              nix run ".#packages.x86_64-linux.security-audit" || true
              ;;
            "performance-benchmark")
              nix run ".#packages.x86_64-linux.performance-benchmark" || true
              ;;
            "migration-helper")
              nix run ".#packages.x86_64-linux.migration-helper" -- . || true
              ;;
          esac

  # 🔍 Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [ validation, build-matrix ]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 🧪 Test template instantiation
        run: |
          echo "🧪 Testing template instantiation..."
          cd /tmp
          nix flake new --template $GITHUB_WORKSPACE#default test-config
          cd test-config
          nix flake check --no-build

      - name: 🔍 Test development shell
        run: |
          echo "🔍 Testing development shell..."
          nix develop --command bash -c "echo 'Development shell works!'"

      - name: 📊 Test flake outputs
        run: |
          echo "📊 Testing flake outputs..."
          nix flake show --json > flake-outputs.json
          jq -r '.nixosConfigurations | keys[]' flake-outputs.json
          jq -r '.packages."x86_64-linux" | keys[]' flake-outputs.json

  # 🚀 Deployment Testing
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ validation, build-matrix ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 📦 Install deploy-rs
        run: |
          nix profile install nixpkgs#deploy-rs

      - name: 🧪 Test deployment configuration
        run: |
          echo "🧪 Testing deployment configuration..."
          # Test that deploy configurations are valid
          nix build ".#deploy.nodes.workstation.profiles.system.path" --dry-run || true

      - name: 🔍 Validate deployment targets
        run: |
          echo "🔍 Validating deployment targets..."
          # Check that all referenced configurations exist
          for node in workstation server development; do
            echo "Checking node: $node"
            nix eval ".#nixosConfigurations.$node.config.networking.hostName" || true
          done

  # 📈 Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ validation, build-matrix ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🗃️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nixos-unified
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: 📦 Install analysis tools
        run: |
          nix profile install nixpkgs#hyperfine
          nix profile install nixpkgs#jq

      - name: ⏱️ Benchmark evaluation time
        run: |
          echo "⏱️ Benchmarking flake evaluation..."
          hyperfine --warmup 1 --runs 3 \
            'nix eval --json .#nixosConfigurations --apply "builtins.attrNames"' \
            --export-json evaluation-benchmark.json

          echo "📊 Evaluation benchmark results:"
          jq '.results[0].mean' evaluation-benchmark.json

      - name: 🏗️ Benchmark build time
        run: |
          echo "🏗️ Benchmarking build time for workstation..."
          hyperfine --warmup 1 --runs 2 \
            'nix build .#nixosConfigurations.workstation.config.system.build.toplevel --no-link' \
            --export-json build-benchmark.json

          echo "📊 Build benchmark results:"
          jq '.results[0].mean' build-benchmark.json

      - name: 💾 Analyze closure sizes
        run: |
          echo "💾 Analyzing closure sizes..."
          for config in workstation server base; do
            echo "=== $config ==="
            nix path-info --closure-size --human-readable \
              ".#nixosConfigurations.$config.config.system.build.toplevel"
          done

  # 📚 Documentation
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validation

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📚 Check documentation coverage
        run: |
          echo "📚 Checking documentation coverage..."
          missing=0

          # Check for README files
          if [ ! -f "README.md" ]; then
            echo "⚠️ Missing root README.md"
            missing=$((missing + 1))
          fi

          # Check for module documentation
          find modules -mindepth 1 -maxdepth 1 -type d | while IFS= read -r module_dir; do
            module_name=$(basename "$module_dir")
            if [ ! -f "$module_dir/README.md" ] && [ ! -f "docs/modules/$module_name.md" ]; then
              echo "⚠️ Missing documentation for module: $module_name"
              missing=$((missing + 1))
            fi
          done

          echo "📊 Missing documentation items: $missing"

      - name: 🔗 Check for broken links
        run: |
          echo "🔗 Checking for broken internal links..."
          find . -name "*.md" -type f -exec grep -l "\.md)" {} \; | while IFS= read -r file; do
            echo "Checking links in $file"
            grep -o '\[.*\](\.\/[^)]*\.md)' "$file" | while IFS= read -r link; do
              target=$(echo "$link" | sed 's/.*(\.\///' | sed 's/).*//')
              if [ ! -f "$target" ]; then
                echo "⚠️ Broken link in $file: $target"
              fi
            done
          done || true

  # ✅ Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [ validation, build-matrix, package-testing, integration-tests ]
    if: always()

    steps:
      - name: ✅ Check CI status
        run: |
          if [[ "${{ needs.validation.result }}" == "success" && \
                "${{ needs.build-matrix.result }}" == "success" && \
                "${{ needs.package-testing.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ CI checks failed:"
            echo "  Validation: ${{ needs.validation.result }}"
            echo "  Build Matrix: ${{ needs.build-matrix.result }}"
            echo "  Package Testing: ${{ needs.package-testing.result }}"
            echo "  Integration Tests: ${{ needs.integration-tests.result }}"
            exit 1
          fi
